/*
现在你总共有 n 门课需要选，记为?0?到?n-1。

在选修某些课程之前需要一些先修课程。?例如，想要学习课程 0 ，你需要先完成课程?1 ，我们用一个匹配来表示他们: [0,1]

给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。

可能会有多个正确的顺序，你只要返回一种就可以了。如果不可能完成所有课程，返回一个空数组。

示例?1:

输入: 2, [[1,0]] 
输出: [0,1]
解释:?总共有 2 门课程。要学习课程 1，你需要先完成课程 0。因此，正确的课程顺序为 [0,1] 。
示例?2:

输入: 4, [[1,0],[2,0],[3,1],[3,2]]
输出: [0,1,2,3] or [0,2,1,3]
解释:?总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。
?    因此，一个正确的课程顺序是?[0,1,2,3] 。另一个正确的排序是?[0,2,1,3] 。

*/
import java.util.*;
class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        List<List<Integer>> list = new ArrayList<>();
        for(int i=0;i<numCourses;i++) list.add(new ArrayList<>());
        int[] inDegree = new int[numCourses];
        for(int i=0;i<prerequisites.length;i++){
            list.get(prerequisites[i][1]).add(prerequisites[i][0]);
            inDegree[prerequisites[i][0]]++;
        }
        Queue<Integer> queue = new LinkedList<>();
        for(int i=0;i<numCourses;i++){
            if(inDegree[i] == 0) queue.offer(i);
        }
        List<Integer> result = new LinkedList<>();
        while(!queue.isEmpty()){
            int n = queue.poll();
            result.add(n);
            numCourses--;
            List<Integer> l = list.get(n);
            for(int c : l){
                inDegree[c]--;
                if(inDegree[c] == 0) queue.offer(c);
            }
        }
        int[] ans = new int[result.size()];
        for(int i=0;i<ans.length;i++) ans[i] = result.get(i);
        return numCourses == 0 ?  ans : new int[]{};
    }
}