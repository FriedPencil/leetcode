/*
给定一个非空的整数数组，返回其中出现频率前?k?高的元素。

示例 1:

输入: nums = [1,1,1,2,2,3], k = 2
输出: [1,2]
示例 2:

输入: nums = [1], k = 1
输出: [1]
说明：

你可以假设给定的?k?总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。
你的算法的时间复杂度必须优于 O(n log n) ,?n?是数组的大小。

*/
class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
         HashMap<Integer,Integer> map = new HashMap<>();
         for(int i=0;i<nums.length;i++) map.put(nums[i],map.getOrDefault(nums[i],0)+1);
         PriorityQueue<Integer> queue = new PriorityQueue<>((o1,o2)->{return map.get(o1)-map.get(o2);});
         for(int i:map.keySet()){
             queue.offer(i);
             if(queue.size() > k) queue.poll();
         }
         LinkedList<Integer> list = new LinkedList<>();
         while(queue.size() > 0){
             list.addFirst(queue.poll());
         }
         return list;
    }
}